   /*======================= [ mixed-in (sass) ] ============================*/
  /*_ mixed-in for ( display=flex; flex=1;)_*/
  @mixin flex-1 {
    display: -webkit-box; /* OLD - iOS 6-, Safari 3.1-6 */
    display: -moz-box; /* OLD - Firefox 19- (buggy but mostly works) */
    display: -moz-flex;
    display: -ms-flexbox; /* TWEENER - IE 10 */
    display: -webkit-flex; /* NEW - Chrome */
    flex: 1;
    -webkit-flex: 1;
    -webkit-box-flex: 1;
    -moz-flex: 1;
    -moz-box-flex: 1;
    -ms-flex: 1;
  }
  /*_ mixed-in for ( display=flex;)_*/
  @mixin flex {
    display: -webkit-box; /* OLD - iOS 6-, Safari 3.1-6 */
    display: -moz-box; /* OLD - Firefox 19- (buggy but mostly works) */
    display: -moz-flex;
    display: -ms-flexbox; /* TWEENER - IE 10 */
    display: -webkit-flex; /* NEW - Chrome */
    display: flex;
  }
  /*_ mixed-in for ( display=flex; - up to down = center , right to left = center )_*/
  @mixin flex-center-center {
  @include flex;
  @include align-items(center);
  @include justify-content(center);
}
  /*_ mixed-in for ( display=flex; - up to down = center , right to left = space-between )_*/
  @mixin flex-center-between {@include flex;@include align-items (center);@include justify-content(space-between);}
  @mixin justify-self-flex-end {@include flex;justify-self: flex-end;}
  @mixin flex-direction($direction: row) {
    @if $direction==row-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: horizontal;
      -moz-box-direction: reverse;
      -moz-box-orient: horizontal;
    }

    @else if $direction==column {
      -webkit-box-direction: normal;
      -webkit-box-orient: vertical;
      -moz-box-direction: normal;
      -moz-box-orient: vertical;
    }

    @else if $direction==column-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: vertical;
      -moz-box-direction: reverse;
      -moz-box-orient: vertical;
    }

    @else {
      -webkit-box-direction: normal;
      -webkit-box-orient: horizontal;
      -moz-box-direction: normal;
      -moz-box-orient: horizontal;
    }

    -webkit-flex-direction: $direction;
    -ms-flex-direction: $direction;
    flex-direction: $direction;
  }
  @mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
    -moz-flex-basis: $value;
    -ms-flex-preferred-size: $value;
    flex-basis: $value;
  }
  @mixin justify-content($value: flex-start) {
    @if $value==flex-start {
      -webkit-box-pack: start;
      -moz-box-pack: start;
      -ms-flex-pack: start;
    }

    @else if $value==flex-end {
      -webkit-box-pack: end;
      -moz-box-pack: end;
      -ms-flex-pack: end;
    }

    @else if $value==space-between {
      -webkit-box-pack: justify;
      -moz-box-pack: justify;
      -ms-flex-pack: justify;
    }

    @else if $value==space-around {
      -ms-flex-pack: distribute;
    }

    @else {
      -webkit-box-pack: $value;
      -moz-box-pack: $value;
      -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
    justify-content: $value;
  }
  @mixin align-items($value: stretch) {
    @if $value==flex-start {
      -webkit-box-align: start;
      -moz-box-align: start;
      -ms-flex-align: start;
    }

    @else if $value==flex-end {
      -webkit-box-align: end;
      -moz-box-align: end;
      -ms-flex-align: end;
    }

    @else {
      -webkit-box-align: $value;
      -moz-box-align: $value;
      -ms-flex-align: $value;
    }

    -webkit-align-items: $value;
    -moz-box-align: $value;
    -ms-flex-align: $value;
    align-items: $value;
  }
  @mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;

    @if $value==flex-start {
      -ms-flex-item-align: start;
    }

    @else if $value==flex-end {
      -ms-flex-item-align: end;
    }

    @else {
      -ms-flex-item-align: $value;
    }

    align-self: $value;
  }
  @mixin flex-wrap($value: nowrap) {
    // No Webkit Box fallback.
    -webkit-flex-wrap: $value;
    -moz-flex-wrap: $value;

    @if $value==nowrap {
      -ms-flex-wrap: none;
    }

    @else {
      -ms-flex-wrap: $value;
    }

    flex-wrap: $value;
  }
  @mixin transform($property) {
    -webkit-transform: $property;
    -ms-transform: $property;
    -moz-transform: $property;
    -o-transform: $property;
    transform: $property;

  }
  /*_ mixed-in for ( transition effect )_*/
  @mixin transition3 {
  -webkit-transition: .3s;
  -moz-transition: .3s;
  -o-transition: .3s;
  transition: .3s;
}
  /*_ mixed-in for ( transition effect )_*/
  @mixin transition4{
  -webkit-transition: .4s;
  -moz-transition: .4s;
  -o-transition: .4s;
  transition: .4s;
}
  @mixin inline-flex {
  display: -webkit-inline-flex; /* OLD - iOS 6-, Safari 3.1-6 *//* NEW - Chrome */
  display: -webkit-inline-box; /* dont delet ! this is important for safari */
  display: -moz-inline-box; /* OLD - Firefox 19- (buggy but mostly works) */
  display: -ms-inline-flexbox; /* TWEENER - IE 10 */
  display: inline-flex;
}
 /*============================ [ breakpoints for responsive in sass ] ==================================*/
  $break-max-4xsm:"(max-width:340px)";
  $break-max-3xsm:"(max-width:365px)";
  $break-max-2xsm:"(max-width:420px)";
  $break-max-xsm:"(max-width:489px)";
  $break-max-sm:"(max-width:576px)";
  $break-max-md:"(max-width:768px)";
  $break-max-lg:"(max-width:992px)";
  $break-max-xl:"(max-width:1200px)";
  $break-max-xxl:"(max-width:1400px)";
  $break-min-3xl:"(min-width:1800px)";
  .container{
    padding: 0 15px;
    margin: 0 auto;
    width: 100%;
    max-width: 1320px;
    @media #{break-max-sm} {
      max-width: 100%;
    }
    @media #{break-max-md} {
      max-width: 720px;
    }
    @media #{break-max-lg} {
      max-width: 960px;
    }
    @media #{break-max-xl} {
      max-width: 1140px;
    }
    @media #{break-max-xxl} {
      max-width: 1320px;
    }
    @media #{$break-min-3xl} {
      max-width: 1320px;
    }
  }